{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from '../actions/alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR } from './types';\nimport setAuthToken from '../utils/setAuthToken'; //Load User\n\nexport const loadUser = async dispatch => {\n  const token = localStorage.getItem('token');\n  if (token) setAuthToken(token);\n\n  try {\n    const res = await axios.get('http://localhost:5000/api/users');\n    dispatch({\n      type: USER_LOADED,\n      payload: user\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('http://localhost:5000/api/users', {\n      name: name,\n      email: email,\n      password: password\n    });\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      dispatch(setAlert(errors[0].msg, 'danger'));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["D:/DevConnectors/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","setAuthToken","loadUser","dispatch","token","localStorage","getItem","res","get","type","payload","user","err","register","name","email","password","body","JSON","stringify","post","data","errors","response","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SACIC,gBADJ,EAEIC,aAFJ,EAGIC,WAHJ,EAIIC,UAJJ,QAKO,SALP;AAMA,OAAOC,YAAP,MAAyB,uBAAzB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAMC,QAAN,IAAkB;AACtC,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,MAAGF,KAAH,EACIH,YAAY,CAACG,KAAD,CAAZ;;AACJ,MAAG;AACA,UAAMG,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAU,iCAAV,CAAlB;AACAL,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEV,WADD;AAELW,MAAAA,OAAO,EAAEC;AAFJ,KAAD,CAAR;AAIF,GAND,CAOA,OAAMC,GAAN,EAAU;AACNT,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAET;AADD,KAAD,CAAR;AAGH;AAEJ,CAjBM,C,CAoBP;;AACA,OAAO,MAAMa,QAAQ,GAAG,CAAE;AAACC,EAAAA,IAAD;AAAMC,EAAAA,KAAN;AAAYC,EAAAA;AAAZ,CAAF,KAA4B,MAAMb,QAAN,IAAkB;AAElE,QAAMc,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACL,IAAAA,IAAD;AAAMC,IAAAA,KAAN;AAAYC,IAAAA;AAAZ,GAAf,CAAb;;AAEA,MAAG;AACC,UAAMT,GAAG,GAAG,MAAMZ,KAAK,CAACyB,IAAN,CAAW,iCAAX,EAA6C;AAACN,MAAAA,IAAI,EAAEA,IAAP;AAAaC,MAAAA,KAAK,EAACA,KAAnB;AAA0BC,MAAAA,QAAQ,EAACA;AAAnC,KAA7C,CAAlB;AACAb,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEZ,gBADD;AAELa,MAAAA,OAAO,EAAEH,GAAG,CAACc;AAFR,KAAD,CAAR;AAIH,GAND,CAOA,OAAMT,GAAN,EAAU;AACN,UAAMU,MAAM,GAAGV,GAAG,CAACW,QAAJ,CAAaF,IAAb,CAAkBC,MAAjC;;AACA,QAAGA,MAAH,EAAU;AACVnB,MAAAA,QAAQ,CAACP,QAAQ,CAAC0B,MAAM,CAAC,CAAD,CAAN,CAAUE,GAAX,EAAe,QAAf,CAAT,CAAR;AACC;;AAEDrB,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEX;AADD,KAAD,CAAR;AAGH;AAEJ,CAtBM","sourcesContent":["import axios from 'axios';\r\nimport {setAlert} from '../actions/alert';\r\nimport {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR\r\n} from './types';\r\nimport setAuthToken from '../utils/setAuthToken'\r\n\r\n//Load User\r\nexport const loadUser = async dispatch => {\r\n    const token = localStorage.getItem('token')\r\n    if(token)\r\n        setAuthToken(token)\r\n    try{\r\n       const res = await axios.get('http://localhost:5000/api/users')\r\n       dispatch({\r\n           type: USER_LOADED,\r\n           payload: user\r\n       })\r\n    }\r\n    catch(err){\r\n        dispatch({\r\n            type: AUTH_ERROR,\r\n        });\r\n    }   \r\n\r\n}\r\n\r\n\r\n//Register User\r\nexport const register = ( {name,email,password}) => async dispatch => {\r\n    \r\n    const body = JSON.stringify({name,email,password});\r\n\r\n    try{\r\n        const res = await axios.post('http://localhost:5000/api/users',{name: name, email:email, password:password});\r\n        dispatch({\r\n            type: REGISTER_SUCCESS,\r\n            payload: res.data\r\n        });\r\n    }\r\n    catch(err){\r\n        const errors = err.response.data.errors;\r\n        if(errors){\r\n        dispatch(setAlert(errors[0].msg,'danger'))\r\n        }\r\n\r\n        dispatch({\r\n            type: REGISTER_FAIL,\r\n        });\r\n    }\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}